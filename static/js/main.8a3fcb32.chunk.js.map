{"version":3,"sources":["sortingAlgorithms/merge.js","sortingAlgorithms/bubble.js","sortingAlgorithms/heap.js","sortingAlgorithms/quick.js","sortingAlgorithms/insertion.js","sortingAlgorithms/selection.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","len","temp","bubbleSortHelper","getHeapSortAnimations","n","x","heapify","heapSortHelper","largest","left","right","getQuickSortAnimations","quickSortHelper","low","high","partition","pivot","y","temp2","quickSortPartition","getInsertionSortAnimations","key","insertionSortHelper","getSelectionSortAnimations","lowest_pos","lowest_val","selectionSortHelper","ANIMATION_SPEED_MS","SortingVisualizer","props","handleNumChange","event","value","state","array_size","valuetext","target","resetArray","handleSpeedChange","showAll","this","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","newColor","barOneStyle","style","height","backgroundColor","barTwoIdx","barTwoStyle","color","starting","bubbleArr","insertionArr","selectionArr","mergeArr","quickArr","heapArr","size","replace","temp3","parseInt","bubbleAnimation","bubbleSortForAll","mergeAnimation","mergeSortForAll","selectionAnimation","selectionSortForAll","heapAnimation","heapSortForAll","quickAnimation","quickSortForAll","insertionAnimation","insertionSortForAll","max_length","max","combinedAnimation","mergeCount","className","class","id","map","idx","type","min","onChange","onClick","sortAll","toggleShowAll","bubbleSort","insertionSort","selectionSort","mergeSort","quickSort","heapSort","React","Component","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAAO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,EAAG,YAAY,UAGnCb,EAAWc,KAAK,CAACF,EAAGC,EAAG,YAAY,UAC/BX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,GAAI,YAAY,UACnDP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,GAAI,YAAY,UACnDR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,EAAG,YAAY,UAGnCZ,EAAWc,KAAK,CAACF,EAAGA,EAAG,YAAY,UAGnCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,GAAI,YAAY,UACnDP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,EAAG,YAAY,UAGnCb,EAAWc,KAAK,CAACD,EAAGA,EAAG,YAAY,UAGnCb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,GAAI,YAAY,UACnDR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLF,SAASgB,EAAwBjB,GACtC,IAAMC,EAAa,GAEnB,OAGF,SAA0BK,EAAUL,GAGhC,IADA,IAAIiB,EAAMZ,EAAUJ,OACXW,EAAI,EAAGA,EAAIK,EAAKL,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAIL,EAAE,EAAGC,IACzB,GAAIR,EAAUQ,GAAKR,EAAUQ,EAAI,GAAI,CACnCb,EAAWc,KAAK,CAACD,EAAER,EAAUQ,GAAG,SAChCb,EAAWc,KAAK,CAACD,EAAE,EAAER,EAAUQ,EAAE,GAAG,cACpCb,EAAWc,KAAK,CAACD,EAAER,EAAUQ,EAAE,GAAG,cAClCb,EAAWc,KAAK,CAACD,EAAE,EAAER,EAAUQ,GAAG,cAClCb,EAAWc,KAAK,CAACD,EAAER,EAAUQ,EAAE,GAAG,cAClC,IAAIK,EAAOb,EAAUQ,GACrBR,EAAUQ,GAAKR,EAAUQ,EAAE,GAC3BR,EAAUQ,EAAE,GAAKK,GAjB7BC,CAAiBpB,EAAOC,GACjBA,ECHF,SAASoB,EAAsBrB,GACpC,IAAMC,EAAa,GAEnB,OAGF,SAAwBK,EAAUL,GAGhC,IADA,IAAIqB,EAAIhB,EAAUJ,OACVqB,EAAIb,KAAKC,MAAMW,EAAE,GAAG,EAAEC,GAAG,EAAEA,IAEjCC,EAAQlB,EAAUgB,EAAEC,EAAEtB,GAExB,IAAQsB,EAAID,EAAE,EAAEC,EAAE,EAAEA,IACpB,CACEtB,EAAWc,KAAK,CAACQ,EAAEjB,EAAU,GAAG,cAChCL,EAAWc,KAAK,CAAC,EAAEI,EAAK,cACxB,IAAIA,EAAOb,EAAUiB,GACrBjB,EAAUiB,GAAKjB,EAAU,GACzBA,EAAU,GAAKa,EACfK,EAAQlB,EAAUiB,EAAE,EAAEtB,IAlBxBwB,CAAezB,EAAMC,GACdA,EAoBT,SAASuB,EAAQxB,EAAMsB,EAAEC,EAAEtB,GAEzB,IAAIyB,EAAUH,EACVI,EAAO,EAAIJ,EAAI,EACfK,EAAQ,EAAIL,EAAI,EASpB,GARGI,EAAOL,GAAKtB,EAAMuB,GAAKvB,EAAM2B,KAE9BD,EAAUC,GAETC,EAAQN,GAAKtB,EAAM0B,GAAW1B,EAAM4B,KAEnCF,EAAUE,GAEXF,GAAWH,EACd,CACEtB,EAAWc,KAAK,CAACQ,EAAEvB,EAAM0B,GAAS,cAClCzB,EAAWc,KAAK,CAACW,EAAQP,EAAK,cAC9B,IAAIA,EAAOnB,EAAMuB,GACjBvB,EAAMuB,GAAKvB,EAAM0B,GACjB1B,EAAM0B,GAAWP,EACjBK,EAAQxB,EAAOsB,EAAGI,EAAQzB,IC3CvB,SAAS4B,EAAuB7B,GACrC,IAAMC,EAAa,GAEnB,OAGF,SAAS6B,EAAgBxB,EAAUL,EAAW8B,EAAIC,GAEhD,GAAGD,EAAMC,EACT,CACE,IAAIC,EAKR,SAA4BjC,EAAM+B,EAAIC,EAAK/B,GAIzC,IAFA,IAAIsB,EAAIQ,EAAI,EACRG,EAAQlC,EAAMgC,GACVG,EAAIJ,EAAKI,EAAIH,EAAKG,IAExB,GAAGnC,EAAMmC,GAAKD,EACd,CACEX,IACAtB,EAAWc,KAAK,CAACQ,EAAEvB,EAAMmC,GAAG,cAC5BlC,EAAWc,KAAK,CAACoB,EAAEnC,EAAMuB,GAAG,cAC5B,IAAIJ,EAAOnB,EAAMuB,GACjBvB,EAAMuB,GAAKvB,EAAMmC,GACjBnC,EAAMmC,GAAKhB,EAGflB,EAAWc,KAAK,CAACQ,EAAE,EAAEvB,EAAMgC,GAAM,cACjC/B,EAAWc,KAAK,CAACiB,EAAKhC,EAAMuB,EAAE,GAAG,cACjC,IAAIa,EAAQpC,EAAMuB,EAAE,GAGpB,OAFAvB,EAAMuB,EAAE,GAAKvB,EAAMgC,GACnBhC,EAAMgC,GAAQI,EACPb,EAAE,EA1BSc,CAAmB/B,EAAUyB,EAAIC,EAAK/B,GACtD6B,EAAgBxB,EAAUL,EAAW8B,EAAIE,EAAU,GACnDH,EAAgBxB,EAAUL,EAAWgC,EAAU,EAAED,IAVnDF,CAAgB9B,EAAMC,EAAW,EAAED,EAAME,OAAO,GACzCD,ECHF,SAASqC,EAA2BtC,GACzC,IAAMC,EAAa,GAEnB,OAGF,SAA6BK,EAAUL,GAErC,IAAI,IAAIsB,EAAI,EAAGA,EAAGjB,EAAUJ,OAAOqB,IACnC,CAGE,IAFA,IAAIgB,EAAMjC,EAAUiB,GAChBY,EAAIZ,EAAE,EACJY,GAAG,GAAKI,EAAIjC,EAAU6B,IAE1B7B,EAAU6B,EAAE,GAAK7B,EAAU6B,GAC3BlC,EAAWc,KAAK,CAACoB,EAAE,EAAE7B,EAAU6B,GAAG,cAClClC,EAAWc,KAAK,CAACoB,EAAE7B,EAAU6B,EAAE,GAAG,SAClCA,IAEF7B,EAAU6B,EAAE,GAAKI,EACjBtC,EAAWc,KAAK,CAACoB,EAAE,EAAEI,EAAI,eAlB3BC,CAAoBxC,EAAOC,GACpBA,ECHF,SAASwC,EAA2BzC,GACzC,IAAMC,EAAa,GAEnB,OAGF,SAA6BK,EAAUL,GAErC,IAAI,IAAIsB,EAAI,EAAGA,EAAIjB,EAAUJ,OAAQqB,IACrC,CAGE,IAFA,IAAImB,EAAanB,EACboB,EAAarC,EAAUiB,GACnBY,EAAIZ,EAAGY,EAAI7B,EAAUJ,OAAQiC,IAEhC7B,EAAU6B,GAAKQ,IAEhBA,EAAarC,EAAU6B,GACvBO,EAAaP,GAGjBlC,EAAWc,KAAK,CAACQ,EAAEjB,EAAUoC,GAAY,cACzCzC,EAAWc,KAAK,CAAC2B,EAAWpC,EAAUiB,GAAG,cACzC,IAAIJ,EAAOb,EAAUiB,GACrBjB,EAAUiB,GAAKjB,EAAUoC,GACzBpC,EAAUoC,GAAcvB,GAtB1ByB,CAAoB5C,EAAOC,GACpBA,E,UCOL4C,EAAqB,GAKJC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA4BRC,gBAAkB,SAACC,EAAMC,GACvB,EAAKC,MAAMC,WAAaC,EAAUJ,EAAMK,OAAOJ,OAC/C,EAAKK,cA/BY,EAiCnBC,kBAAoB,SAACP,EAAMC,GACzB,IAAI/B,EAAO8B,EAAMK,OAAOJ,MAGxBL,EAAqBQ,EADT,GADAlC,EAAK,OAjCjB,EAAKgC,MAAQ,CACXnD,MAAO,GACPoD,WAAY,IACZK,SAAS,GALM,E,gEAUjBC,KAAKH,e,mCAKL,IADA,IAAMvD,EAAQ,GACNuB,EAAI,EAAGA,EAAImC,KAAKP,MAAMC,WAAY7B,IAErCmC,KAAKP,MAAMM,QAEZzD,EAAMe,KAAK4C,EAAsB,EAAE,MAInC3D,EAAMe,KAAK4C,EAAsB,EAAE,MAIvCD,KAAKE,SAAS,CAAC5D,MAAMA,M,sCAcrB0D,KAAKP,MAAMM,SAAWC,KAAKP,MAAMM,QACjCC,KAAKH,e,sCAKL,IADA,IAAMtD,EAAaF,EAAuB2D,KAAKP,MAAMnD,OADvD,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAcT,IADA,IAAMZ,EAAaF,EAAuB2D,KAAKP,MAAMnD,OADvD,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAElD,GADsBlD,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACVoD,EADU,KACCO,EADD,KAEXJ,EAAcP,EAAUI,GAAWI,MACnCI,EAAcZ,EAAUW,GAAWH,MACnCK,EAAQ7D,EAAI,IAAM,EAvER,OADF,YAyEdmD,YAAW,WACTI,EAAYG,gBAAkBG,EAC9BD,EAAYF,gBAAkBG,IAC7B7D,EAAIgC,QAEPmB,YAAW,WAAO,IAAD,cACgB/D,EAAWY,GAD3B,GACRoD,EADQ,KACGC,EADH,KAEKL,EAAUI,GAAWI,MAC7BC,OAAZ,UAAwBJ,EAAxB,QACCrD,EAAIgC,IAjBFhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAyBT,IADA,IAAMZ,EAAa4B,EAAuB6B,KAAKP,MAAMnD,OADvD,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,iCAcT,IADA,IAAMZ,EAAaoB,EAAsBqC,KAAKP,MAAMnD,OADtD,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,mCAcT,IADA,IAAMZ,EAAagB,EAAwByC,KAAKP,MAAMnD,OADxD,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,sCAaT,IADA,IAAMZ,EAAaqC,EAA2BoB,KAAKP,MAAMnD,OAD3D,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,sCAaT,IADA,IAAMZ,EAAawC,EAA2BiB,KAAKP,MAAMnD,OAD3D,WAEWa,GACP,IAAMgD,EAAYC,SAASC,uBAAuB,aAClDC,YAAW,WAAO,IAAD,cAC0B/D,EAAWY,GADrC,GACRoD,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChCtD,EAAIgC,IAPAhC,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,sCAUKb,EAAM2E,GAGpB,IADA,IAAM1E,EAAaF,EAAuBC,GAClCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,uCAEQD,EAAM2E,GAGrB,IADA,IAAM1E,EAAagB,EAAwBjB,GACnCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,0CAEWD,EAAM2E,GAGxB,IADA,IAAM1E,EAAawC,EAA2BzC,GACtCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,0CAEWD,EAAM2E,GAGxB,IADA,IAAM1E,EAAaqC,EAA2BtC,GACtCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,qCAEMD,EAAM2E,GAGnB,IADA,IAAM1E,EAAaoB,EAAsBrB,GACjCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,sCAEOD,EAAM2E,GAGpB,IADA,IAAM1E,EAAa4B,EAAuB7B,GAClCuB,EAAI,EAAGA,EAAItB,EAAWC,OAAQqB,IAEpCtB,EAAWsB,GAAG,GAAKtB,EAAWsB,GAAG,GAAGoD,EAEtC,OAAO1E,I,gCAYP,IARA,IAAM4D,EAAYC,SAASC,uBAAuB,aAC9Ca,EAAY,GACZC,EAAe,GACfC,EAAe,GACfC,EAAW,GACXC,EAAW,GACXC,EAAU,GACVC,EAAOxB,KAAKP,MAAMC,WACd7B,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CACE,IAEIa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrBwC,EAAU7D,KAAKqE,GAEjB,IAAQ7D,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CAGMa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrB2C,EAAShE,KAAKqE,GAEhB,IAAQ7D,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CAGMa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrB0C,EAAa/D,KAAKqE,GAEpB,IAAQ7D,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CAGMa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrB6C,EAAQlE,KAAKqE,GAEf,IAAQ7D,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CAGMa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrB4C,EAASjE,KAAKqE,GAEhB,IAAQ7D,EAAI,EAAE2D,EAAK3D,EAAE,EAAE2D,EAAK3D,IAC5B,CAGMa,EAFOyB,EAAUtC,GAAG8C,MACFC,OACCa,QAAQ,KAAK,IAChCC,EAAQC,SAASjD,GACrByC,EAAa9D,KAAKqE,GAEpB,IAAIE,EAAkB5B,KAAK6B,iBAAiBX,EAAU,EAAEM,GACpDM,EAAiB9B,KAAK+B,gBAAgBV,EAAS,EAAEG,GACjDQ,EAAqBhC,KAAKiC,oBAAoBf,EAAU,EAAEM,GAC1DU,EAAgBlC,KAAKmC,eAAeZ,EAAQ,EAAEC,GAC9CY,EAAiBpC,KAAKqC,gBAAgBf,EAAS,EAAEE,GACjDc,EAAqBtC,KAAKuC,oBAAoBpB,EAAa,EAAEK,GAC7DgB,EAAaxF,KAAKyF,IAAIb,EAAgBpF,OAAOsF,EAAetF,OAAOwF,EAAmBxF,OAAO0F,EAAc1F,OAAO4F,EAAe5F,OAAO8F,EAAmB9F,QAC3JkG,EAAoB,GACxB,IAAQ7E,EAAI,EAAGA,EAAI2E,EAAW3E,IAEH,MAAtB+D,EAAgB/D,IAEjB6E,EAAkBrF,KAAKuE,EAAgB/D,IAEjB,MAArBiE,EAAejE,IAEhB6E,EAAkBrF,KAAKyE,EAAejE,IAEZ,MAAzBmE,EAAmBnE,IAEpB6E,EAAkBrF,KAAK2E,EAAmBnE,IAErB,MAApBqE,EAAcrE,IAEf6E,EAAkBrF,KAAK6E,EAAcrE,IAEf,MAArBuE,EAAevE,IAEhB6E,EAAkBrF,KAAK+E,EAAevE,IAEZ,MAAzByE,EAAmBzE,IAEpB6E,EAAkBrF,KAAKiF,EAAmBzE,IAI9C,IADA,IAAI8E,EAAa,EA5FnB,WA6FW9E,GAEP,GADuB8E,EAAa,IAAM,GAAgC,SAA3BD,EAAkB7E,GAAG,GACjD,CAAC,IAAD,cACc6E,EAAkB7E,GADhC,GACV0C,EADU,KACCO,EADD,KAEXJ,EAAcP,EAAUI,GAAWI,MACnCI,EAAcZ,EAAUW,EAAU,EAAEU,GAAMb,MAC1CK,EAAQ2B,EAAa,IAAM,EAnTjB,OADF,YAqTdrC,YAAW,WACTI,EAAYG,gBAAkBG,EAC9BD,EAAYF,gBAAkBG,IAC7BnD,EAAIsB,QAIPmB,YAAW,WAAO,IAAD,cAC0BoC,EAAkB7E,GAD5C,GACR0C,EADQ,KACGC,EADH,KACcC,EADd,KAETC,EAAcP,EAAUI,GAAWI,MACzCD,EAAYE,OAAZ,UAAwBJ,EAAxB,MACAE,EAAYG,gBAAZ,UAAiCJ,KAChC5C,EAAIsB,GAEqB,SAA3BuD,EAAkB7E,GAAG,IAEtB8E,KAvBK9E,EAAI,EAAGA,EAAI6E,EAAkBlG,OAAQqB,IAAM,EAA3CA,K,+BA2BD,IAAD,OACAvB,EAAS0D,KAAKP,MAAdnD,MACP,OAAG0D,KAAKP,MAAMM,QAGV,yBAAK6C,UAAU,2BACb,yBAAKC,MAAM,UACT,6DAEF,yBAAKA,MAAM,wBACT,yBAAKD,UAAU,wBACb,2CACA,yBAAKA,UAAU,2BAA2BE,GAAG,eAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,wBACb,0CACA,yBAAKA,UAAU,2BAA2BE,GAAG,cAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,wBACb,8CACA,yBAAKA,UAAU,2BAA2BE,GAAG,kBAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,wBACb,yCACA,yBAAKA,UAAU,2BAA2BE,GAAG,aAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,wBACb,0CACA,yBAAKA,UAAU,2BAA2BE,GAAG,cAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,wBACb,8CACA,yBAAKA,UAAU,2BAA2BE,GAAG,kBAC5CxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,eAMhB,yBAAKoD,UAAU,kBACb,yBAAKA,UAAU,oBACb,8CACA,2BAAOK,KAAK,QAAQC,IAAI,IAAIT,IAAI,MAAMI,MAAM,SAASC,GAAG,UAAUK,SAAUnD,KAAKV,mBAEnF,yBAAKsD,UAAU,mBACb,qCACA,2BAAOK,KAAK,QAAQC,IAAI,IAAIT,IAAI,MAAMI,MAAM,SAASC,GAAG,UAAUK,SAAUnD,KAAKF,qBAEnF,4BAAQsD,QAAS,kBAAM,EAAKC,WAAWT,UAAU,aAAjD,SACA,4BAAQQ,QAAS,kBAAM,EAAKvD,cAAc+C,UAAU,WAApD,uBACA,4BAAQQ,QAAS,kBAAM,EAAKE,iBAAiBV,UAAU,cAAvD,YAQJ,yBAAKA,UAAU,2BACb,yBAAKC,MAAM,UACT,6DAEF,yBAAKA,MAAM,wBACT,yBAAKD,UAAU,sBAAsBE,GAAG,OACvCxG,EAAMyG,KAAI,SAACvD,EAAOwD,GAAR,OACT,yBACEJ,UAAU,YACV/D,IAAKmE,EACLrC,MAAO,CACLC,OAAO,GAAD,OAAKpB,EAAL,cAKd,yBAAKoD,UAAU,kBACb,yBAAKA,UAAU,oBACb,8CACA,2BAAOK,KAAK,QAAQC,IAAI,IAAIT,IAAI,MAAMI,MAAM,SAASC,GAAG,UAAUK,SAAUnD,KAAKV,mBAEnF,yBAAKsD,UAAU,mBACb,qCACA,2BAAOK,KAAK,QAAQC,IAAI,IAAIT,IAAI,MAAMI,MAAM,SAASC,GAAG,UAAUK,SAAUnD,KAAKF,qBAEnF,4BAAQsD,QAAS,kBAAM,EAAKvD,cAAc+C,UAAU,WAApD,uBACA,4BAAQQ,QAAS,kBAAM,EAAKG,cAAcX,UAAU,cAApD,UACA,4BAAQQ,QAAS,kBAAM,EAAKI,iBAAiBZ,UAAU,iBAAvD,aACA,4BAAQQ,QAAS,kBAAM,EAAKK,iBAAiBb,UAAU,iBAAvD,aACA,4BAAQQ,QAAS,kBAAM,EAAKM,aAAad,UAAU,aAAnD,SACA,4BAAQQ,QAAS,kBAAM,EAAKO,aAAaf,UAAU,aAAnD,SACA,4BAAQQ,QAAS,kBAAM,EAAKQ,YAAYhB,UAAU,YAAlD,QACA,4BAAQQ,QAAS,kBAAM,EAAKE,iBAAiBV,UAAU,cAAvD,gB,GAldmCiB,IAAMC,WAgerD,SAASnE,EAAUH,GACjB,MAAM,GAAN,OAAUA,GAEZ,SAASS,EAAsBiD,EAAKT,GAElC,OAAOzF,KAAKC,MAAMD,KAAK+G,UAAYtB,EAAMS,EAAM,GAAKA,G,MCxevCc,MAPf,WACA,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCIgBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpE,SAASqE,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a3fcb32.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j, \"turquoise\",\"merge\"]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j, \"turquoise\",\"merge\"]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i], \"turquoise\",\"merge\"]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j], \"turquoise\",\"merge\"]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i, \"turquoise\",\"merge\"]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i, \"turquoise\",\"merge\"]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i], \"turquoise\",\"merge\"]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j, \"turquoise\",\"merge\"]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j, \"turquoise\",\"merge\"]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j], \"turquoise\",\"merge\"]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  bubbleSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(mainArray,animations)\r\n{\r\n    let len = mainArray.length;\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len-i-1; j++) {\r\n            if (mainArray[j] > mainArray[j + 1]) {\r\n              animations.push([j,mainArray[j],\"blue\"]);\r\n              animations.push([j+1,mainArray[j+1],\"turquoise\"]);\r\n              animations.push([j,mainArray[j+1],\"turquoise\"]);\r\n              animations.push([j+1,mainArray[j],\"turquoise\"]);\r\n              animations.push([j,mainArray[j+1],\"turquoise\"]);\r\n              var temp = mainArray[j];\r\n              mainArray[j] = mainArray[j+1];\r\n              mainArray[j+1] = temp;\r\n            }\r\n        }\r\n    }\r\n};\r\n","export function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  heapSortHelper(array,animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapSortHelper(mainArray,animations)\r\n{\r\n  var n = mainArray.length;\r\n  for(var x = Math.floor(n/2)-1;x>-1;x--)\r\n  {\r\n    heapify(mainArray,n,x,animations);\r\n  }\r\n  for(var x = n-1;x>0;x--)\r\n  {\r\n    animations.push([x,mainArray[0],\"turquoise\"]);\r\n    animations.push([0,temp,\"turquoise\"]);\r\n    var temp = mainArray[x];\r\n    mainArray[x] = mainArray[0];\r\n    mainArray[0] = temp;\r\n    heapify(mainArray,x,0,animations);\r\n  }\r\n}\r\nfunction heapify(array,n,x,animations)\r\n{\r\n  var largest = x\r\n  var left = 2 * x + 1\r\n  var right = 2 * x + 2\r\n  if(left < n && array[x] < array[left])\r\n  {\r\n    largest = left\r\n  }\r\n  if(right < n && array[largest] < array[right])\r\n  {\r\n      largest = right\r\n  }\r\n  if(largest != x)\r\n  {\r\n    animations.push([x,array[largest],\"turquoise\"]);\r\n    animations.push([largest,temp,\"turquoise\"]);\r\n    var temp = array[x]\r\n    array[x] = array[largest]\r\n    array[largest] = temp\r\n    heapify(array, n, largest,animations)\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array,animations,0,array.length-1);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(mainArray,animations,low,high)\r\n{\r\n  if(low < high)\r\n  {\r\n    var partition = quickSortPartition(mainArray,low,high,animations);\r\n    quickSortHelper(mainArray,animations,low,partition-1);\r\n    quickSortHelper(mainArray,animations,partition+1,high);\r\n  }\r\n}\r\nfunction quickSortPartition(array,low,high,animations)\r\n{\r\n  var x = low-1;\r\n  var pivot = array[high];\r\n  for(var y = low; y < high;y++)\r\n  {\r\n    if(array[y] < pivot)\r\n    {\r\n      x++;\r\n      animations.push([x,array[y],\"turquoise\"]);\r\n      animations.push([y,array[x],\"turquoise\"]);\r\n      var temp = array[x];\r\n      array[x] = array[y];\r\n      array[y] = temp;\r\n    }\r\n  }\r\n  animations.push([x+1,array[high],\"turquoise\"]);\r\n  animations.push([high,array[x+1],\"turquoise\"]);\r\n  var temp2 = array[x+1];\r\n  array[x+1] = array[high];\r\n  array[high] = temp2;\r\n  return x+1;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  insertionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSortHelper(mainArray,animations)\r\n{\r\n  for(var x = 1; x <mainArray.length;x++)\r\n  {\r\n    var key = mainArray[x];\r\n    var y = x-1;\r\n    while(y>=0 && key<mainArray[y])\r\n    {\r\n      mainArray[y+1] = mainArray[y];\r\n      animations.push([y+1,mainArray[y],\"turquoise\"]);\r\n      animations.push([y,mainArray[y+1],\"blue\"]);\r\n      y--;\r\n    }\r\n    mainArray[y+1] = key;\r\n    animations.push([y+1,key,\"turquoise\"])\r\n  }\r\n}\r\n","export function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  selectionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(mainArray,animations)\r\n{\r\n  for(var x = 0; x < mainArray.length; x++)\r\n  {\r\n    var lowest_pos = x;\r\n    var lowest_val = mainArray[x];\r\n    for(var y = x; y < mainArray.length; y++)\r\n    {\r\n      if(mainArray[y] < lowest_val)\r\n      {\r\n        lowest_val = mainArray[y];\r\n        lowest_pos = y;\r\n      }\r\n    }\r\n    animations.push([x,mainArray[lowest_pos],\"turquoise\"]);\r\n    animations.push([lowest_pos,mainArray[x],\"turquoise\"]);\r\n    var temp = mainArray[x];\r\n    mainArray[x] = mainArray[lowest_pos];\r\n    mainArray[lowest_pos] = temp;\r\n\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/merge.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubble.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heap.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quick.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/insertion.js';\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/selection.js';\r\n\r\nimport './SortingVisualizer.css';\r\nimport Slider from '@material-ui/core/Slider';\r\nvar ANIMATION_SPEED_MS = 10;\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'blue';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      array_size: 100,\r\n      showAll: false,\r\n    };\r\n  }\r\n  componentDidMount()\r\n  {\r\n    this.resetArray();\r\n  }\r\n  resetArray()\r\n  {\r\n    const array = [];\r\n    for(let x = 0; x < this.state.array_size; x++)\r\n    {\r\n      if(this.state.showAll)\r\n      {\r\n        array.push(randomIntFromInterval(5,350));\r\n      }\r\n      else\r\n      {\r\n        array.push(randomIntFromInterval(5,815));\r\n      }\r\n\r\n    }\r\n    this.setState({array:array});\r\n  }\r\n  handleNumChange = (event,value) => {\r\n    this.state.array_size = valuetext(event.target.value);\r\n    this.resetArray();\r\n  };\r\n  handleSpeedChange = (event,value) => {\r\n    var temp = event.target.value;\r\n    var temp2 = temp/100;\r\n    var temp3 = 1/temp2;\r\n    ANIMATION_SPEED_MS = valuetext(temp3);\r\n  };\r\n  toggleShowAll()\r\n  {\r\n    this.state.showAll = !this.state.showAll;\r\n    this.resetArray();\r\n  }\r\n  mergeSortTest()\r\n  {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n\r\n  mergeSort()\r\n  {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort()\r\n  {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n\r\n  heapSort()\r\n  {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n\r\n  bubbleSort()\r\n  {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n  insertionSort()\r\n  {\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n  selectionSort()\r\n  {\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight, newColor] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n        barOneStyle.backgroundColor = `${newColor}`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n  mergeSortForAll(array,starting)\r\n  {\r\n    const animations = getMergeSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  bubbleSortForAll(array,starting)\r\n  {\r\n    const animations = getBubbleSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  selectionSortForAll(array,starting)\r\n  {\r\n    const animations = getSelectionSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  insertionSortForAll(array,starting)\r\n  {\r\n    const animations = getInsertionSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  heapSortForAll(array,starting)\r\n  {\r\n    const animations = getHeapSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  quickSortForAll(array,starting)\r\n  {\r\n    const animations = getQuickSortAnimations(array);\r\n    for(var x = 0; x < animations.length; x++)\r\n    {\r\n      animations[x][0] = animations[x][0]+starting;\r\n    }\r\n    return animations;\r\n  }\r\n  sortAll()\r\n  {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    var bubbleArr = [];\r\n    var insertionArr = [];\r\n    var selectionArr = [];\r\n    var mergeArr = [];\r\n    var quickArr = [];\r\n    var heapArr = [];\r\n    var size = this.state.array_size;\r\n    for(var x = 0*size;x<1*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      bubbleArr.push(temp3);\r\n    }\r\n    for(var x = 1*size;x<2*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      mergeArr.push(temp3);\r\n    }\r\n    for(var x = 1*size;x<2*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      selectionArr.push(temp3);\r\n    }\r\n    for(var x = 2*size;x<3*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      heapArr.push(temp3);\r\n    }\r\n    for(var x = 3*size;x<4*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      quickArr.push(temp3);\r\n    }\r\n    for(var x = 4*size;x<5*size;x++) //these get  the arrays to be put into the algorithms\r\n    {\r\n      var temp = arrayBars[x].style;\r\n      var tempHeight = temp.height;\r\n      var temp2 = tempHeight.replace(\"px\",\"\");\r\n      var temp3 = parseInt(temp2);\r\n      insertionArr.push(temp3);\r\n    }\r\n    var bubbleAnimation = this.bubbleSortForAll(bubbleArr,0*size);\r\n    var mergeAnimation = this.mergeSortForAll(mergeArr,1*size);\r\n    var selectionAnimation = this.selectionSortForAll(bubbleArr,2*size);\r\n    var heapAnimation = this.heapSortForAll(heapArr,3*size);\r\n    var quickAnimation = this.quickSortForAll(quickArr,4*size);\r\n    var insertionAnimation = this.insertionSortForAll(insertionArr,5*size);\r\n    var max_length = Math.max(bubbleAnimation.length,mergeAnimation.length,selectionAnimation.length,heapAnimation.length,quickAnimation.length,insertionAnimation.length)\r\n    var combinedAnimation = [];\r\n    for(var x = 0; x < max_length;x++)\r\n    {\r\n      if(bubbleAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(bubbleAnimation[x]);\r\n      }\r\n      if(mergeAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(mergeAnimation[x]);\r\n      }\r\n      if(selectionAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(selectionAnimation[x]);\r\n      }\r\n      if(heapAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(heapAnimation[x]);\r\n      }\r\n      if(quickAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(quickAnimation[x]);\r\n      }\r\n      if(insertionAnimation[x] != null)\r\n      {\r\n        combinedAnimation.push(insertionAnimation[x]);\r\n      }\r\n    }\r\n    var mergeCount = 0;\r\n    for (let x = 0; x < combinedAnimation.length; x++) {\r\n      const isColorChange = (mergeCount % 3 !== 2)&&(combinedAnimation[x][3] == \"merge\");\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = combinedAnimation[x];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx+1*size].style;\r\n        const color = mergeCount % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, x * ANIMATION_SPEED_MS);\r\n      }\r\n      else\r\n      {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight, newColor] = combinedAnimation[x];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          barOneStyle.backgroundColor = `${newColor}`;\r\n        }, x * ANIMATION_SPEED_MS);\r\n      }\r\n      if(combinedAnimation[x][3] == \"merge\")\r\n      {\r\n        mergeCount++;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const {array} = this.state;\r\n    if(this.state.showAll) //shows 6 charts\r\n    {\r\n      return (\r\n        <div className=\"page-container-show-all\">\r\n          <div class=\"header\">\r\n            <h1>Sorting Algorithm Visualizer</h1>\r\n          </div>\r\n          <div class=\"arrays-container-all\">\r\n            <div className=\"text-array-container\">\r\n              <h2>Bubble Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"bubble-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-array-container\">\r\n              <h2>Merge Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"merge-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-array-container\">\r\n              <h2>Selection Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"selection-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-array-container\">\r\n              <h2>Heap Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"heap-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-array-container\">\r\n              <h2>Quick Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"quick-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-array-container\">\r\n              <h2>Insertion Sort</h2>\r\n              <div className=\"array-container-show-all\" id=\"insertion-sort\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    height: `${value}px`,\r\n                  }}></div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottom-bar-all\">\r\n            <div className=\"number-container\">\r\n              <h3>Number of Bars</h3>\r\n              <input type=\"range\" min=\"1\" max=\"180\" class=\"slider\" id=\"myRange\" onChange={this.handleNumChange}/>\r\n            </div>\r\n            <div className=\"speed-container\">\r\n              <h3>Speed</h3>\r\n              <input type=\"range\" min=\"5\" max=\"100\" class=\"slider\" id=\"myRange\" onChange={this.handleSpeedChange}/>\r\n            </div>\r\n            <button onClick={() => this.sortAll()} className=\"start-all\">Start</button>\r\n            <button onClick={() => this.resetArray()} className=\"new-all\">Generate New Arrays</button>\r\n            <button onClick={() => this.toggleShowAll()} className=\"toggle-all\">Toggle</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else\r\n    {\r\n      return (\r\n        <div className=\"page-container-show-all\">\r\n          <div class=\"header\">\r\n            <h1>Sorting Algorithm Visualizer</h1>\r\n          </div>\r\n          <div class=\"arrays-container-one\">\r\n            <div className=\"array-container-one\" id=\"one\">\r\n            {array.map((value, idx) => (\r\n              <div\r\n                className=\"array-bar\"\r\n                key={idx}\r\n                style={{\r\n                  height: `${value}px`,\r\n                }}></div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"bottom-bar-one\">\r\n            <div className=\"number-container\">\r\n              <h3>Number of Bars</h3>\r\n              <input type=\"range\" min=\"1\" max=\"360\" class=\"slider\" id=\"myRange\" onChange={this.handleNumChange}/>\r\n            </div>\r\n            <div className=\"speed-container\">\r\n              <h3>Speed</h3>\r\n              <input type=\"range\" min=\"5\" max=\"100\" class=\"slider\" id=\"myRange\" onChange={this.handleSpeedChange}/>\r\n            </div>\r\n            <button onClick={() => this.resetArray()} className=\"new-one\">Generate New Arrays</button>\r\n            <button onClick={() => this.bubbleSort()} className=\"bubble-one\">Bubble</button>\r\n            <button onClick={() => this.insertionSort()} className=\"insertion-one\">Insertion</button>\r\n            <button onClick={() => this.selectionSort()} className=\"selection-one\">Selection</button>\r\n            <button onClick={() => this.mergeSort()} className=\"merge-one\">Merge</button>\r\n            <button onClick={() => this.quickSort()} className=\"quick-one\">Quick</button>\r\n            <button onClick={() => this.heapSort()} className=\"heap-one\">Heap</button>\r\n            <button onClick={() => this.toggleShowAll()} className=\"toggle-one\">Toggle</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nfunction wait(ms)\r\n{\r\n    var d = new Date();\r\n    var d2 = null;\r\n    do { d2 = new Date(); }\r\n    while(d2-d < ms);\r\n}\r\nfunction valuetext(value) {\r\n  return `${value}`;\r\n}\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","\nimport React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\nreturn (\n  <div className=\"App\">\n    <SortingVisualizer></SortingVisualizer>\n  </div>\n);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}